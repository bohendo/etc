#!/usr/bin/env bash
set -e

# Not included:
# - browser extensions: metamask & pocket
# - mounting internal hard drive

########################################
# Install simple, essential utils

if [[ -z "$(command -v curl)" ]]
then sudo apt-get install -y curl
else echo "curl is already installed"
fi

# Install Nix
if [[ -z "$(command -v nix)" ]]
then curl -L https://nixos.org/nix/install | sh
else echo "Nix is already installed"
fi

nixpkgs=(
  bat
  blender # crashes with core dump
  brave
  calibre # crashes with core dump
  cmake
  cryptsetup
  docker
  earthly
  exiftool
  ffmpeg
  firefox
  flatpak
  gimp # crashes due to font config error
  git
  gnumake
  gnupg
  go
  imagemagick
  inkscape # crashes due to font config error
  jq
  keepass # crashes due to font config error
  ledger-live-desktop # crashes due to font config error
  libheif
  nmap
  openvpn
  pdftk
  qbittorrent # crashes due to font config error
  rename
  shellcheck
  sqlite
  tree
  unixtools.ifconfig
  unoconv
  # urbit # build fails
  vim
  vlc # crashes due to font config error
  whois
  xclip
)

nix-channel --add https://github.com/NixOS/nixpkgs/archive/f7db217f3253c3c92ddc9b119dfeef8746c95b84.tar.gz

# nixpkgs
for pkg in "${nixpkgs[@]}"
do nix-env -iA "nixpkgs.$pkg"
done

# other nix pkgs
# nix-env -iA gnome.networkmanager-openvpn

# Tools whose executable doesn't match the package name
for util in build-essential ca-certificates libopenjp2-tools libudev-dev libusb-1.0-0-dev snapd
do
  if ! dpkg -s "$util" > /dev/null 2>&1
  then
    echo
    echo "Installing $util"
    sudo apt-get install -y "$util" 
  else echo "$util is already installed"
  fi
done

########################################
# Install stuff that requires custom steps

# Javascript Tools: nvm & npm & node js
export NVM_DIR="$HOME/.nvm";
# shellcheck disable=SC1091
[ -f "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
if [[ -z "$(command -v npm)" ]]
then
  echo
  echo "Installing nvm & node js"
  # Install NVM first
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/4b947ec92d0195756709e5b563569cf48aef1e09/install.sh | sudo -E bash -
  export NVM_DIR="$HOME/.nvm"
  # shellcheck disable=SC1091
  [ -f "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
  sudo chown -R "$(id -u):$(id -g)" "$NVM_DIR" "$HOME/.config"
  nvm install 14
  nvm use 14
  node -v
else 
  echo "nvm & npm & node are already installed"
fi

# Obsidian
if [[ -z "$(command -v obsidian)" ]]
then
  echo
  echo "Installing Obsidian"
  flatpak install -y flathub md.obsidian.Obsidian
else
  echo "Obsidian is already installed"
fi

# Dropbox
if [[ -z "$(command -v dropbox)" ]]
then
  echo
  echo "Installing Dropbox"
  echo "deb [arch=i386,amd64] http://linux.dropbox.com/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/dropbox.list
  sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 1C61A2656FB57B7E4DE0F4C1FC918B335044912E
  sudo apt update
  sudo apt install -y python3-gpg dropbox
else 
  echo "Dropbox is already installed"
fi

# Neovim
if [[ -z "$(command -v nvim)" ]]
then
  echo
  echo "Installing Neovim"
  sudo add-apt-repository -y ppa:neovim-ppa/unstable
  sudo apt-get update -y
  sudo apt-get install -y neovim
  vimdir="$HOME/.config/nvim"
  mkdir -p ~/.vimtmp # This folder will store our temporary backup files
  mkdir -p "$vimdir/autoload" "$vimdir/bundle" "$vimdir/undo"
  # https://github.com/tpope/vim-pathogen
  curl -LSso "$vimdir/autoload/pathogen.vim" https://tpo.pe/pathogen.vim
  (
    cd "$vimdir/bundle"
    [[ -d nerdtree ]] || git clone -q https://github.com/scrooloose/nerdtree.git
    [[ -d supertab ]] || git clone -q https://github.com/ervandew/supertab
    [[ -d syntastic ]] || git clone -q --depth=1 https://github.com/vim-syntastic/syntastic.git
    [[ -d typescript-vim ]] || git clone -q https://github.com/leafgarland/typescript-vim.git
    [[ -d vim-javascript ]] || git clone -q https://github.com/pangloss/vim-javascript.git
    [[ -d vim-jsx ]] || git clone -q https://github.com/mxw/vim-jsx.git
    [[ -d vim-solidity ]] || git clone -q https://github.com/tomlion/vim-solidity.git
    [[ -d vim-vinegar ]] || git clone -q https://github.com/tpope/vim-vinegar.git
  )
  chown -R "$(id -u):$(id -g)" "$vimdir"
else 
  echo "Neovim is already installed"
fi

# Ledger Live
if [[ -z "$(command -v ledger)" ]]
then
  echo
  echo "Installing Ledger Live"
  # Instructions: https://support.ledger.com/hc/en-us/articles/115005165269-Fix-USB-connection-issues-with-Ledger-Live
  # Script from: https://raw.githubusercontent.com/LedgerHQ/udev-rules/master/add_udev_rules.sh
  cat <<-EOF | sudo tee /etc/udev/rules.d/20-hw1.rules
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="2581", ATTRS{idProduct}=="1b7c|2b7c|3b7c|4b7c", TAG+="uaccess", TAG+="udev-acl"
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="2c97", ATTRS{idProduct}=="0000|0000|0001|0002|0003|0004|0005|0006|0007|0008|0009|000a|000b|000c|000d|000e|000f|0010|0011|0012|0013|0014|0015|0016|0017|0018|0019|001a|001b|001c|001d|001e|001f", TAG+="uaccess", TAG+="udev-acl"
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="2c97", ATTRS{idProduct}=="0001|1000|1001|1002|1003|1004|1005|1006|1007|1008|1009|100a|100b|100c|100d|100e|100f|1010|1011|1012|1013|1014|1015|1016|1017|1018|1019|101a|101b|101c|101d|101e|101f", TAG+="uaccess", TAG+="udev-acl"
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="2c97", ATTRS{idProduct}=="0002|2000|2001|2002|2003|2004|2005|2006|2007|2008|2009|200a|200b|200c|200d|200e|200f|2010|2011|2012|2013|2014|2015|2016|2017|2018|2019|201a|201b|201c|201d|201e|201f", TAG+="uaccess", TAG+="udev-acl"
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="2c97", ATTRS{idProduct}=="0003|3000|3001|3002|3003|3004|3005|3006|3007|3008|3009|300a|300b|300c|300d|300e|300f|3010|3011|3012|3013|3014|3015|3016|3017|3018|3019|301a|301b|301c|301d|301e|301f", TAG+="uaccess", TAG+="udev-acl"
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="2c97", ATTRS{idProduct}=="0004|4000|4001|4002|4003|4004|4005|4006|4007|4008|4009|400a|400b|400c|400d|400e|400f|4010|4011|4012|4013|4014|4015|4016|4017|4018|4019|401a|401b|401c|401d|401e|401f", TAG+="uaccess", TAG+="udev-acl"
	EOF
  sudo udevadm trigger
  sudo udevadm control --reload
  binFile="$HOME/bin/ledger"
  rm -f "$binFile"
  wget -O "$binFile" https://download-live.ledger.com/releases/latest/download/linux
  chmod +x "$binFile"
else
  echo "Ledger Live is already installed"
fi

# Install snap packages
for pkg in blender discord spotify
do
  if [[ -z "$(command -v "$pkg")" ]]
  then
    echo
    echo "Installing $pkg"
    sudo snap install "$pkg"
  else
    echo "$pkg is already installed"
  fi
done

# OpenVPN
if [[ -z "$(command -v openvpn)" ]]
then
  echo
  echo "Installing OpenVPN"
  sudo apt install -y network-manager-openvpn-gnome openvpn
  # Run below command to import a config file (h/t https://askubuntu.com/a/1071042)
  # sudo nmcli connection import type openvpn file /path/to/foo.ovpn
else
  echo "OpenVPN is already installed"
fi

# Maser PDF Editor
if [[ -z "$(command -v masterpdfeditor5)" ]]
then
  echo
  echo "Installing Master PDF Editor"
  sudo apt install -y libqt5printsupport5
  rm -f /tmp/masterpdfeditor5.deb
  wget -O /tmp/masterpdfeditor5.deb https://code-industry.net/public/master-pdf-editor-5.7.20-qt5.x86_64.deb
  sudo dpkg -i /tmp/masterpdfeditor5.deb
else
  echo "Master PDF Editor is already installed"
fi

# Inkscape
if [[ -z "$(command -v inkscape)" ]]
then
  echo
  echo "Installing Inkscape"
  sudo apt install -y inkscape
else
  echo "Inkscape is already installed"
fi

# qBittorrent
if [[ -z "$(command -v qbittorrent)" ]]
then
  echo
  echo "Installing qBittorrent"
  sudo apt install -y qbittorrent
else
  echo "qBittorrent is already installed"
fi

# Calibre
if [[ -z "$(command -v calibre)" ]]
then
  echo
  echo "Installing Calibre"
  dest="$HOME/Downloads/calibre-installer.sh"
  if [[ ! -f "$dest" ]]
  then wget -O "$dest" https://download.calibre-ebook.com/linux-installer.sh
  fi
  echo "Calibre installer has been downloaded, executing it now.."
  sudo sh "$dest"
  deDRM="$HOME/Downloads/deDRM.zip"
  if [[ ! -f "$deDRM" ]]
  then wget -O "$deDRM" https://github.com/apprenticeharper/DeDRM_tools/releases/download/v7.1.0/DeDRM_tools_7.1.0.zip
  fi
  cd "$(dirname "$deDRM")" || exit 1
  unzip "$deDRM"
  calibre-customize --add DeDRM_plugin.zip
else
  echo "Calibre is already installed"
fi

# Flatpak
if [[ -z "$(command -v flatpak)" ]]
then
  echo
  echo "Installing flatpak"
  sudo apt-get install -y flatpak
  sudo apt install -y gnome-software-plugin-flatpak
  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
else
  echo "Flatpak is already installed"
fi

########################################
# Upgrade everything & auto-remove unnecessary stuff

echo
echo "Checking for packages to upgrade or remove"
sudo apt-get upgrade -y
sudo apt-get autoremove -y
echo "Finished installing & upgrading"
echo

########################################
# Setup Symlinks

echo "Setting up symlinks"

all=${ETC_DIR:-$HOME/all}
etc=${ETC_DIR:-$all/Documents/etc}
media=${MEDIA_DIR:-$all/Documents/media}
echo "Setting up symlinks in realtion to etc dir at $etc"
echo "ctrl-C & set env var ETC_DIR if this isn't correct"
sleep 2

if [[ ! -d "$all" ]]
then
  echo "Creating ~/all & moving important stuff into it"
  mkdir -pv "$all"  
  mv -v "$HOME/Documents" "$all/Documents"
  ln -sfTv "$all/Documents" "$HOME/Documents"
  mv -v "$HOME/Dropbox" "$all/Dropbox"
  ln -sfTv "$all/Dropbox" "$HOME/Dropbox"
fi

if [[ -d "$HOME/Media" && ! -L "$HOME/Media" ]]
then
  mv -v "$HOME/Media" "$all/Media"
  if [[ ! -d "$HOME/Media" && ! -L "$HOME/Media" ]]
  then ln -sfTv "$all/Media" "$HOME/Media"
  fi
else
  mkdir -pv "$HOME/Media"
fi

if [[ ! -d "$etc" ]]
then
  echo "$etc doesn't exist, skipping dotfile link creation"
else
  # link dot files
  ln -sfTv "$etc/bash_aliases" "$HOME/.bash_aliases"
  ln -sfTv "$etc/bash_logout" "$HOME/.bash_logout"
  ln -sfTv "$etc/bashrc" "$HOME/.bashrc"
  ln -sfTv "$etc/desktop_aliases" "$HOME/.desktop_aliases"
  ln -sfTv "$etc/eslintrc.json"  "$HOME/.eslintrc.json"
  ln -sfTv "$etc/gitconfig"  "$HOME/.gitconfig"
  ln -sfTv "$etc/inputrc" "$HOME/.inputrc"
  ln -sfTv "$etc/profile" "$HOME/.profile"
  ln -sfTv "$etc/pylintrc"  "$HOME/.pylintrc"
  ln -sfTv "$etc/vimrc"  "$HOME/.vimrc"
  ln -sfTv "$etc/vimrc"  "$HOME/.config/nvim/init.vim"
fi

# Link common shortcuts to home dir
ln -sfTv "$all/Dropbox" "$HOME/Dropbox"
ln -sfTv "$all/Dropbox/Shared" "$HOME/shared"
ln -sfTv "$all/Obsidian" "$HOME/Obsidian"
ln -sfTv "$all/Obsidian/blog" "$HOME/b"
ln -sfTv "$all/Obsidian/journal" "$HOME/j"
ln -sfTv "$all/Obsidian/notes" "$HOME/n"
ln -sfTv "$all/Documents" "$HOME/d"
ln -sfTv "$all/Documents/etc" "$HOME/etc"

# Add utils to our home's bin
mkdir -p "$HOME/bin"
for util in "$etc/bin/"* "$media/bin/"*
do ln -sfTv "$util" "$HOME/bin/$(basename "$util")"
done
