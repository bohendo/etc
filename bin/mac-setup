#!/usr/bin/env bash
set -e

# Designed for MacOS

########################################
# Basic dir setup

mkdir -p "$HOME/bin"

########################################
# Install simple, essential utils

# Install Homebrew
if [[ -z "$(command -v brew)" ]]
then
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  export PATH="$PATH:/opt/homebrew/bin/"
  # shellcheck disable=SC2016
  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/bohendo/.bash_profile
  eval "$(/opt/homebrew/bin/brew shellenv)"
else echo "Homebrew is already installed"
fi

if [[ -z "$(command -v curl)" ]]
then brew install curl
else echo "curl is already installed"
fi

# Install Nix
if [[ -z "$(command -v nix)" ]]
then curl -L https://nixos.org/nix/install | sh
else echo "Nix is already installed"
fi

nixpkgs=(
  bash
  bash-completion
  bat
  coreutils
  graphviz 
  libusb1
  cmake
  docker
  earthly
  git
  gnumake
  gnupg
  go
  jq
  neovim
  pandoc
  rename
  python2
  python3
  ruby
  shellcheck
  stack
  tree
  vim
  vscode
  whois
)

nix-channel --add https://nixos.org/channels/nixpkgs-unstable
nix-channel --update

# Allow unfree packages
nixpkgs_config="$HOME/.config/nixpkgs/config.nix"
mkdir -p "$(dirname "$nixpkgs_config")"
if [[ ! -f "$nixpkgs_config" ]]
then echo '{ allowUnfree = true; }' > "$nixpkgs_config"
fi

# nixpkgs
for pkg in "${nixpkgs[@]}"
do nix-env -iA "nixpkgs.$pkg"
done

# python39Packages
for pkg in pip crytic-compile solc-select
do nix-env -iA "nixpkgs.python39Packages.$pkg"
done

# nodePackages
for pkg in ganache ts-node
do nix-env -iA "nixpkgs.nodePackages.$pkg"
done

# Install simple CLI tools with brew
INSTALLED="$(brew list --versions | awk '{print $1}')"
for util in cask pyenv pyenv-virtualenvwrapper
do
  if [[ "$INSTALLED" == *"$util"* ]]
  then echo "$util is already installed"
  else
    echo
    echo "Installing $util"
    brew install "$util"
  fi
done

########################################
# Install stuff that requires custom steps

# Javascript Tools: nvm & npm & node js
mkdir -p "$HOME/.nvm"
export NVM_DIR="$HOME/.nvm";
# shellcheck disable=SC1091
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
if [[ -z "$(command -v npm)" ]]
then
  echo
  echo "Installing nvm & npm & node js"
  # Install nvm prerequisits
  brew uninstall --ignore-dependencies node || true
  brew uninstall --force node || true
  brew install nvm
  # shellcheck disable=SC1091
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
  # shellcheck disable=SC1091
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
  nvm install node # latest version
  nvm install 14 # version 14.x.x
  nvm ls
  nvm use 14
  node -v
else
  echo "nvm & npm & node are already installed"
fi

# Javascript CLI Tools
for npmPkg in hardhat solhint surya yarn
do
  if [[ -z "$(command -v $npmPkg)" ]]
  then
    echo
    echo "Installing $npmPkg"
    npm install -g "$npmPkg"
  else echo "$npmPkg is already installed"
  fi
done

# Python & pip3
if [[ -z "$(command -v python)" || -z "$(command -v pip)" ]]
then
  echo
  echo "Installing pyenv & python & pip3"
  brew install pyenv pyenv-virtualenvwrapper
  pyenv install 3.9.12
  pyenv global 3.9.12
else echo "pyenv & python & pip are already installed"
fi

# configure shell autocompletion
docker_autocompletion="/usr/local/etc/bash_completion.d/docker-compose"
if [[ ! -f "$docker_autocompletion" ]]
then
  echo "folder: $(dirname "$docker_autocompletion")"
  if [[ ! -d "$(dirname "$docker_autocompletion")" ]]
  then sudo mkdir -pv "$(dirname "$docker_autocompletion")"
  fi
  sudo curl -s \
    -L https://raw.githubusercontent.com/docker/compose/1.25.4/contrib/completion/bash/docker-compose \
    -o "$docker_autocompletion"
fi

########################################
# Configure neovim plugins

# Neovim
echo
echo "Installing Neovim plugins.."
vimdir="$HOME/.config/nvim"
mkdir -p ~/.vimtmp # This folder will store our temporary backup files
mkdir -p "$vimdir/autoload" "$vimdir/bundle" "$vimdir/undo"
# https://github.com/tpope/vim-pathogen
curl -LSso "$vimdir/autoload/pathogen.vim" https://tpo.pe/pathogen.vim
(
cd "$vimdir/bundle"
[[ -d earthly.vim ]] || git clone git@github.com:earthly/earthly.vim.git
[[ -d nerdtree ]] || git clone -q https://github.com/scrooloose/nerdtree.git
[[ -d supertab ]] || git clone -q https://github.com/ervandew/supertab
[[ -d syntastic ]] || git clone -q --depth=1 https://github.com/vim-syntastic/syntastic.git
[[ -d typescript-vim ]] || git clone -q https://github.com/leafgarland/typescript-vim.git
[[ -d vim-javascript ]] || git clone -q https://github.com/pangloss/vim-javascript.git
[[ -d vim-jsx ]] || git clone -q https://github.com/mxw/vim-jsx.git
[[ -d vim-solidity ]] || git clone -q https://github.com/TovarishFin/vim-solidity.git
[[ -d vim-vinegar ]] || git clone -q https://github.com/tpope/vim-vinegar.git
)
chown -R "$(id -u):$(id -g)" "$vimdir"
echo "All Neovim plugins are installed"

# Configure git autocompletion
if [[ ! -f "/.git-completion.bash" ]]
then curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
fi

########################################
# Upgrade everything & auto-remove unnecessary stuff

echo
echo "Checking for packages to upgrade or remove"

stack upgrade

brew update
brew upgrade
brew cleanup -s

echo "Finished installing & upgrading"
echo

########################################
# Setup Symlinks

# shellcheck disable=SC2155
export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"

etc=${ETC_DIR:-$HOME/Documents/etc}
echo "Setting up symlinks in realtion to etc dir at $etc"
echo "ctrl-C & set env var ETC_DIR if this isn't correct"
sleep 2

# Link common shortcuts to home dir
ln -sfTv "$HOME/Documents" "$HOME/d"
ln -sfTv "$HOME/d/bohendo/etc" "$HOME/etc"
ln -sfTv "$HOME/Obsidian/journal" "$HOME/j"
ln -sfTv "$HOME/Obsidian/notes" "$HOME/n"
ln -sfTv "$HOME/Obsidian/blog" "$HOME/b"

if [[ ! -d "$etc" ]]
then
  echo "$etc doesn't exist, skipping dotfile link creation"
else
  # link dot files
  ln -sfTv "$etc/bash_aliases" "$HOME/.bash_aliases"
  ln -sfTv "$etc/bash_logout" "$HOME/.bash_logout"
  ln -sfTv "$etc/eslintrc.json"  "$HOME/.eslintrc.json"
  ln -sfTv "$etc/gitconfig"  "$HOME/.gitconfig"
  ln -sfTv "$etc/inputrc" "$HOME/.inputrc"
  ln -sfTv "$etc/linuxify" "$HOME/.linuxify"
  ln -sfTv "$etc/mac.bashrc" "$HOME/.bash_profile"
  ln -sfTv "$etc/mac_aliases" "$HOME/.mac_aliases"
  ln -sfTv "$etc/profile" "$HOME/.profile"
  ln -sfTv "$etc/pylintrc"  "$HOME/.pylintrc"
  ln -sfTv "$etc/vimrc"  "$HOME/.config/nvim/init.vim"
  ln -sfTv "$etc/vimrc"  "$HOME/.vimrc"
fi

# Add utils to our home's bin
for util in "$etc/bin/"*
do ln -sfTv "$util" "$HOME/bin/$(basename "$util")"
done

# Add gnu utils to our home's bin to override builtins
gnubin="/opt/homebrew/bin"
for util in find grep sed sort
do ln -sfTv "$gnubin/g${util}" "$HOME/bin/$util"
done

# shellcheck disable=SC1091
source "$HOME/.bash_profile"
