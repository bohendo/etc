#!/bin/bash
set -e

me="$(who | awk '{print $1}')"

########################################
# Install simple, essential utils

for util in curl git jq pdftk rename shellcheck tree vim whois xclip
do
  if [[ -z "$(which $util)" ]]
  then
    echo
    echo "Installing $util"
    sudo apt-get install -y "$util" 
  else echo "$util is already installed"
  fi
done

########################################
# Install stuff that requires custom steps

# KeePassXC
if [[ -z "$(which keepassxc)" ]]
then
  sudo add-apt-repository -y ppa:phoerious/keepassxc
  sudo apt update
  sudo apt install keepassxc
else 
  echo "KeepassXC is already installed"
fi

# Dropbox
if [[ -z "$(which dropbox)" ]]
then
  echo
  echo "Installing Dropbox"
  echo "deb [arch=i386,amd64] http://linux.dropbox.com/ubuntu bionic main" > /etc/apt/sources.list.d/dropbox.list
  sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 1C61A2656FB57B7E4DE0F4C1FC918B335044912E
  sudo apt update
  sudo apt install python3-gpg dropbox
else 
  echo "Dropbox is already installed"
fi

# Docker
if [[ -z "$(which docker)" ]]
then
  echo
  echo "Installing Docker"
  echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu `lsb_release -cs` stable" | sudo tee /etc/apt/sources.list.d/docker.list
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo apt update
  sudo apt-get install -y docker-ce
  # post-installation setup
  usermod -aG docker $me
  systemctl enable docker
  docker swarm init "--advertise-addr=127.0.0.1" 2> /dev/null
else 
  echo "Docker is already installed"
fi

# Brave Browser
if [[ -z "$(which brave-browser)" ]]
then
  echo
  echo "Installing Brave Browser"
  sudo apt install -y apt-transport-https curl gnupg
  curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
  echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser.list
  sudo apt update
  sudo apt install -y brave-browser
else 
  echo "Brave Browser is already installed"
fi

# Load nvm if it exists before checking whether node stuff exists
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
if [[ -z "$(which npm)" ]]
then
  echo
  echo "Installing nvm & npm & node js"
  # Install NVM first
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/4b947ec92d0195756709e5b563569cf48aef1e09/install.sh | sudo -E bash -
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  sudo chown -R "$(id -u):$(id -g)" "$NVM_DIR" "$HOME/.config"
  nvm install 14
  nvm use 14
  node -v
else 
  echo "nvm & npm & node are already installed"
fi

# GIMP 
if [[ -z "$(which gimp)" && $(false) ]] # This is broken, always skip it for now
then
  echo
  echo "Installing GIMP"
  sudo apt -y update
  sudo apt install -y gimp
else 
  echo "GIMP is already installed"
fi

# Neovim
if [[ -z "$(which nvim)" ]]
then
  echo
  echo "Installing Neovim"
  sudo add-apt-repository -y ppa:neovim-ppa/unstable
  sudo apt-get update -y
  sudo apt-get install -y neovim
  mkdir -p ~/.vimtmp # This folder will store our temporary backup files
  mkdir -p ~/.vim/autoload ~/.vim/bundle ~/.vim/undo
  mkdir -p ~/.config/nvim
  # https://github.com/tpope/vim-pathogen
  curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
  (
    cd ~/.vim/bundle
    [[ -d nerdtree ]] || git clone -q https://github.com/scrooloose/nerdtree.git
    [[ -d supertab ]] || git clone -q https://github.com/ervandew/supertab
    [[ -d syntastic ]] || git clone -q --depth=1 https://github.com/vim-syntastic/syntastic.git
    [[ -d typescript-vim ]] || git clone -q https://github.com/leafgarland/typescript-vim.git
    [[ -d vim-javascript ]] || git clone -q https://github.com/pangloss/vim-javascript.git
    [[ -d vim-jsx ]] || git clone -q https://github.com/mxw/vim-jsx.git
    [[ -d vim-solidity ]] || git clone -q https://github.com/tomlion/vim-solidity.git
    [[ -d vim-vinegar ]] || git clone -q https://github.com/tpope/vim-vinegar.git
  )
  chown -R "$(id -u):$(id -g)" ~/.vim
else 
  echo "Neovim is already installed"
fi

# Pandoc
if [[ -z "$(which pandoc)" ]]
then
  echo
  echo "Installing Pandoc"
  sudo apt-get install -y texlive-latex-recommended texlive-fonts-recommended texlive-xetex
  rm -f /tmp/pandoc.deb
  wget -O /tmp/pandoc.deb https://github.com/jgm/pandoc/releases/download/2.11.3.2/pandoc-2.11.3.2-1-amd64.deb
  sudo dpkg -i /tmp/pandoc.deb
else
  echo "Pandoc is already installed"
fi

# Discord
if [[ -z "$(which discord)" ]]
then
  echo
  echo "Installing Discord"
  snap install discord
else
  echo "Discord is already installed"
fi

# Github CLI
if [[ -z "$(which gh)" ]]
then
  echo
  echo "Installing Github CLI"
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
  sudo apt-add-repository https://cli.github.com/packages
  sudo apt update -y
  sudo apt install -y gh
else
  echo "Github CLI is already installed"
fi

# OpenVPN
if [[ -z "$(which openvpn)" ]]
then
  echo
  echo "Installing OpenVPN"
  sudo apt install openvpn
  sudo apt-get install network-manager-openvpn-gnome
  # below command came from: https://askubuntu.com/a/1071042
  sudo nmcli connection import type openvpn file /path/to/foo.ovpn
else
  echo "OpenVPN is already installed"
fi

# Urbit
if [[ -z "$(which urbit)" ]]
then
  echo
  echo "Installing Urbit"
  echo "JK not really"
  # curl -O https://bootstrap.urbit.org/urbit-linux64-v0.10.3.tgz
  # tar xzf urbit-linux64-v0.10.3.tgz
  # mv urbit-linux64-v0.10.3/urbit ~/bin/urbit
else
  echo "Urbit is already installed"
fi

# PDF MASTER?! Oh No

# setup touchpad drivers & cmd line config
# sudo apt-get remove xserver-xorg-input-libinput libinput-tools
# sudo apt-get install xserver-xorg-input-all xserver-xorg-input-evdev xserver-xorg-input-synaptics

# Do we need any of these?
# compizconfig-settings-manager build-essential libssl-dev net-tools exfat-fuse exfat-utils
# that gnome tweak tool thing

########################################
# Upgrade everything & auto-remove unnecessary stuff

echo
echo "Checking for packages to upgrade or remove"
sudo apt-get upgrade -y
sudo apt-get autoremove -y

echo
echo "Finished installing & upgrading"

########################################
# Setup Symlinks

echo "Setting up symlinks"

etc=$HOME/all/Documents/etc

mkdir -p "$HOME/bin"

# link dot files
ln -sfT "$etc/bash_aliases" "$HOME/.bash_aliases"
ln -sfT "$etc/bashrc" "$HOME/.bashrc"
ln -sfT "$etc/eslintrc.json"  "$HOME/.eslintrc.json"
ln -sfT "$etc/gitconfig"  "$HOME/.gitconfig"
ln -sfT "$etc/inputrc" "$HOME/.inputrc"
ln -sfT "$etc/npmrc"  "$HOME/.npmrc"
ln -sfT "$etc/profile" "$HOME/.profile"
ln -sfT "$etc/pylintrc"  "$HOME/.pylintrc"
ln -sfT "$etc/vimrc"  "$HOME/.vimrc"
ln -sfT "$etc/vimrc"  "$HOME/.config/nvim/init.vim"

# Link major folders to home dir
ln -sfT "$HOME/all/Documents" "$HOME/Documents"
ln -sfT "$HOME/all/Dropbox" "$HOME/Dropbox"
ln -sfT "$HOME/all/Media" "$HOME/Media"

# Link common shortcuts to home dir
ln -sfT "$HOME/all/Documents/blog-content" "$HOME/b"
ln -sfT "$HOME/all/Documents" "$HOME/d"
ln -sfT "$HOME/all/Documents/etc" "$HOME/etc"
ln -sfT "$HOME/all/Documents/go" "$HOME/go"
ln -sfT "$HOME/all/Dropbox/journal" "$HOME/all/Documents/journal"
ln -sfT "$HOME/all/Documents/journal" "$HOME/j"
ln -sfT "$HOME/all/Media" "$HOME/m"
ln -sfT "$HOME/all/Documents/notes" "$HOME/n"
ln -sfT "$HOME/all/Dropbox/todo" "$HOME/.todo"
ln -sfT "$HOME/.todo" "$HOME/t"
ln -sfT "$HOME/all/Dropbox/Shared" "$HOME/s"


# Put misc utility scripts into our home's bin
for util in $etc/bin/*
do ln -sfT "$util" "$HOME/bin/`basename $util`"
done

ln -sfT "$HOME/Documents/journal/rjournal" "$HOME/bin/rjournal"
ln -sfT "$HOME/.todo/todo.sh" "$HOME/bin/todo"
