#!/bin/bash
set -e

me="$(who | awk '{print $1}')"

########################################
# Install simple, essential utils

for util in curl git jq tree vim xclip
do
  if [[ -z "$(which $util)" ]]
  then
    echo
    echo "Installing $util"
    sudo apt-get install -y "$util" 
  else echo "$util is already installed"
  fi
done

########################################
# Install stuff that requires custom steps

# KeePassXC
if [[ -z "$(which keepassxc)" ]]
then
  sudo add-apt-repository -y ppa:phoerious/keepassxc
  sudo apt update
  sudo apt install keepassxc
else 
  echo "KeepassXC is already installed"
fi

# Dropbox
if [[ -z "$(which dropbox)" ]]
then
  echo
  echo "Installing Dropbox"
  echo "deb [arch=i386,amd64] http://linux.dropbox.com/ubuntu bionic main" > /etc/apt/sources.list.d/dropbox.list
  sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 1C61A2656FB57B7E4DE0F4C1FC918B335044912E
  sudo apt update
  sudo apt install python3-gpg dropbox
else 
  echo "Dropbox is already installed"
fi

# Docker
if [[ -z "$(which docker)" ]]
then
  echo
  echo "Installing Docker"
  echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu `lsb_release -cs` stable" | sudo tee /etc/apt/sources.list.d/docker.list
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo apt update
  sudo apt-get install -y docker-ce
  # post-installation setup
  usermod -aG docker $me
  systemctl enable docker
  docker swarm init "--advertise-addr=127.0.0.1" 2> /dev/null
else 
  echo "Docker is already installed"
fi

# Brave Browser
if [[ -z "$(which brave-browser)" ]]
then
  echo
  echo "Installing Brave Browser"
  sudo apt install -y apt-transport-https curl gnupg
  curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
  echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser.list
  sudo apt update
  sudo apt install -y brave-browser
else 
  echo "Brave Browser is already installed"
fi

# Load nvm if it exists before checking whether node stuff exists
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
if [[ -z "$(which npm)" ]]
then
  echo
  echo "Installing nvm & npm & node js"
  # Install NVM first
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/4b947ec92d0195756709e5b563569cf48aef1e09/install.sh | sudo -E bash -
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  sudo chown -R "$(id -u):$(id -g)" "$NVM_DIR" "$HOME/.config"
  nvm install 14
  nvm use 14
  node -v
else 
  echo "nvm & npm & node are already installed"
fi

# GIMP 
if [[ -z "$(which gimp)" && $(false) ]] # This is broken, always skip it for now
then
  echo
  echo "Installing GIMP"
  sudo apt -y update
  sudo apt install -y gimp
else 
  echo "GIMP is already installed"
fi

# Neovim
if [[ -z "$(which nvim)" ]]
then
  echo
  echo "Installing Neovim"
  sudo add-apt-repository -y ppa:neovim-ppa/unstable
  sudo apt-get update -y
  sudo apt-get install -y neovim
  mkdir -p ~/.vimtmp # This folder will store our temporary backup files
  mkdir -p ~/.vim/autoload ~/.vim/bundle ~/.vim/undo
  # https://github.com/tpope/vim-pathogen
  curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
  (
    cd ~/.vim/bundle
    [[ -d nerdtree ]] || git clone -q https://github.com/scrooloose/nerdtree.git
    [[ -d supertab ]] || git clone -q https://github.com/ervandew/supertab
    [[ -d syntastic ]] || git clone -q --depth=1 https://github.com/vim-syntastic/syntastic.git
    [[ -d typescript-vim ]] || git clone -q https://github.com/leafgarland/typescript-vim.git
    [[ -d vim-javascript ]] || git clone -q https://github.com/pangloss/vim-javascript.git
    [[ -d vim-jsx ]] || git clone -q https://github.com/mxw/vim-jsx.git
    [[ -d vim-solidity ]] || git clone -q https://github.com/tomlion/vim-solidity.git
    [[ -d vim-vinegar ]] || git clone -q https://github.com/tpope/vim-vinegar.git
  )
  chown -R "$(id -u):$(id -g)" ~/.vim
else 
  echo "Neovim is already installed"
fi

# PDF MASTER?! Oh No

########################################
# Upgrade everything & auto-remove unnecessary stuff
echo
echo "Checking for packages to upgrade or remove"
sudo apt-get upgrade -y
sudo apt-get autoremove -y

echo
echo "All done"
exit





# Pandoc
apt-get install -y pandoc texlive-latex-recommended texlive-fonts-recommended texlive-xetex
pandoc=pandoc-2.7.3-1-amd64.deb
wget https://github.com/jgm/pandoc/releases/download/2.7.3/$pandoc
dpkg -i $pandoc
rm $pandoc




# Still need:
# compizconfig-settings-manager
# solc
# npm install -g surya
# sudo apt install net-tools
# sudo apt-get install android-tools-adb android-tools-fastboot # maybe not..
# vim-gnome
# Zoom
# pdftk
# pip
# exfat-fuse exfat-utils
# gnome-tweak-tool unity-tweak-tool dconf-editor
# snap install discord
# build-essential libssl-dev nvm
# whois

# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
# sudo apt-add-repository https://cli.github.com/packages
# sudo apt update
# sudo apt install gh

# apt-get install shellcheck

# Install Urbit
# curl -O https://bootstrap.urbit.org/urbit-linux64-v0.10.3.tgz
# tar xzf urbit-linux64-v0.10.3.tgz
# mv urbit-linux64-v0.10.3/urbit ~/bin/urbit

# setup touchpad drivers & cmd line config
# sudo apt-get remove xserver-xorg-input-libinput libinput-tools
# sudo apt-get install xserver-xorg-input-all xserver-xorg-input-evdev xserver-xorg-input-synaptics

# Install Rust + wasm-pack
# curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

# Whiteblock
# curl -sSf https://assets.whiteblock.io/cli/install.sh | sh

# Install neovim
# sudo add-apt-repository ppa:neovim-ppa/stable
# sudo apt-get update
# sudo apt-get install neovim

# Android dev stuff
# sudo apt-get install openjdk-8-jre

# sudo apt install openvpn
# sudo apt-get install network-manager-openvpn-gnome
# below command came from: https://askubuntu.com/a/1071042
# sudo nmcli connection import type openvpn file /path/to/foo.ovpn

